on:
  workflow_dispatch: {}
  pull_request: {}
  push:
    branches:
    - main
    - master
    paths:
    - .github/workflows/build-deploy.yml
  schedule:
  # random HH:MM to avoid a load spike on GitHub Actions at 00:00
  - cron: 32 1 * * *

jobs:
  wiz-cli-image-scan:
    name: 'Wiz-cli Image Scan'
    runs-on: ubuntu-latest
    env:
      SCAN_PATH: "." # Set the relative path in the repo to build the image from
      TAG: "aklaas2/vault-go-demo" # Set the tag to use for the image
      POLICY: "aklaas_vulnerability_policy" # Set the desired Wiz CLI policy to use
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Build
        run: go build -v ./...

      # - name: Test
      #   run: go test -v ./...

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build the Docker image
        run: cd $SCAN_PATH && docker build . --tag $TAG # Configure to fit the params you use to build your image

      - name: Download Wiz CLI
        run: curl -o wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64 && chmod +x wizcli

      - name: Authenticate to Wiz
        run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
        env:
          WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

      - name: Run wiz-cli docker image scan
        run: sudo ./wizcli docker scan --image aklaas2/vault-go-demo:latest --policy "$POLICY"
    
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: aklaas2/vault-go-demo:latest

      - name: Run wiz-cli docker image tag
        run: sudo ./wizcli docker tag --image aklaas2/vault-go-demo:latest 
      

  # deploy:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
          
  #     - name: Install kubectl
  #       run: |
  #         sudo apt-get update && sudo apt-get install -y ca-certificates curl apt-transport-https
  #         curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
  #         echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
  #         sudo apt-get update
  #         sudo apt-get install -y kubectl
          
  #     - name: Configure kubectl
  #       run: |
  #         mkdir ${HOME}/.kube
  #         echo ${{ secrets.KUBE_CONFIG }} | base64 --decode > ${HOME}/.kube/config

  #     - name: use context
  #       run: |
  #         kubectl config use-context us-east-1

  #     - name: Deploy to EKS
  #       run: |
  #         kubectl apply -f new_vault-go-demo/
      
  #     - name: Wait for app deployment
  #       run: |
  #         echo "Starting sleep wait"
  #         sleep 60
  #         echo "Sleep wait complete"
  #     #test 
  #     - name: ZAP Scan
  #       uses: zaproxy/action-baseline@v0.7.0
  #       with:
  #         target: "http://dev.andrewlklaas.com"